generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categorize {
  cat_id     Int      @id @default(autoincrement())
  quiz_id    Int?
  categories String[]
  items      String[]
  quiz       quiz?    @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "categorize_quiz_id_quiz_quiz_id_fk")
}

model draganddrop {
  dd_id   Int      @id @default(autoincrement())
  quiz_id Int?
  items   String[]
  quiz    quiz?    @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "draganddrop_quiz_id_quiz_quiz_id_fk")
}

model essay {
  essay_id Int    @id @default(autoincrement())
  quiz_id  Int?
  question String @db.VarChar(255)
  quiz     quiz?  @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "essay_quiz_id_quiz_quiz_id_fk")
}

model matchmaking {
  mm_id   Int      @id @default(autoincrement())
  quiz_id Int?
  items   String[]
  quiz    quiz?    @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "matchmaking_quiz_id_quiz_quiz_id_fk")
}

model multiplechoice {
  mc_id          Int      @id @default(autoincrement())
  quiz_id        Int?
  question       String   @db.VarChar(255)
  choices        String[]
  correct_choice Int
  quiz           quiz?    @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "multiplechoice_quiz_id_quiz_quiz_id_fk")
}

model pictureanswers {
  pa_id     Int    @id @default(autoincrement())
  quiz_id   Int?
  image_url String @db.VarChar(255)
  answer    String
  quiz      quiz?  @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "pictureanswers_quiz_id_quiz_quiz_id_fk")
}

model quiz {
  quiz_id        Int              @id @default(autoincrement())
  quiz_name      String           @db.VarChar(100)
  id             Int?
  categorize     categorize[]
  draganddrop    draganddrop[]
  essay          essay[]
  matchmaking    matchmaking[]
  multiplechoice multiplechoice[]
  pictureanswers pictureanswers[]
  users          users?           @relation(fields: [id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "quiz_id_users_id_fk")
  rearrange      rearrange[]
  shortentry     shortentry[]
}

model rearrange {
  re_id          Int   @id @default(autoincrement())
  quiz_id        Int?
  question_order Int[]
  quiz           quiz? @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "rearrange_quiz_id_quiz_quiz_id_fk")
}

model shortentry {
  se_id    Int    @id @default(autoincrement())
  quiz_id  Int?
  question String @db.VarChar(255)
  quiz     quiz?  @relation(fields: [quiz_id], references: [quiz_id], onDelete: NoAction, onUpdate: NoAction, map: "shortentry_quiz_id_quiz_quiz_id_fk")
}

model users {
  id         Int       @id @default(autoincrement())
  name       String?   @db.VarChar(255)
  email      String?   @unique @db.VarChar(255)
  avatar     String?   @db.VarChar(255)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  quiz       quiz[]
}
